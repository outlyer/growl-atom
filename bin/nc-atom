#!/usr/bin/ruby

# == Synopsis
#
# Makes Mac OS X notifications from new Atom entries. 
# 
# == Usage
#
# nc-atom [COMMAND]
#
# help:
#	Show this help page
#
# check:
#	Check the current feeds defined in the current user's config file, found at
#	~/.nc-atom/config This command is run from the LaunchAgent setup by the install command
#
# install:
#	Install this for the current user, installs an OS X LaunchAgent (daemon process) for 
#	the current user and creates an empty config file in ~/.nc-atom/config
#
# uninstall:
#	Uninstall the LaunchAgent for the current user, also delete all config and cache
#	files under ~/.nc-atom/
#
# clear-caches:
#	Clear all cache files for the current user. Cache files stop notifications being repeated.
#	Atom entry IDs are stored in them once a notification has been shown. They can be found in
#	~/.nc-atom/caches/
#

$:.push(File.dirname(__FILE__) + "/../lib")
require 'rubygems'
require 'nc-atom'
require 'optparse'

user_dir = File.expand_path('~')
gem_dir = NCAtom.gem_dir
launch_agent = "nc.atom"
launch_agent_plist = launch_agent + ".plist"
launch_agents_dir = user_dir + "/Library/LaunchAgents/"


options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: nc-atom [options]"

  opts.on("-c", "--check", "Check mail now") { NCAtom.check(File.join(user_dir, '.nc-atom')); exit }

  opts.on("-i", "--install", "Install base configuration file") {

		# Create user config dir
		system 'mkdir -p ' + File.join(user_dir, '.nc-atom/caches')
		system "cp -i #{File.join(gem_dir, 'config')} #{File.join(user_dir, '.nc-atom/config')}"
		system "cp -ri #{File.join(gem_dir, 'icons')} #{File.join(user_dir, '.nc-atom/icons')}"		
		
		# Create Launch Agent dir
		if (!File.directory?(launch_agents_dir))
			system "mkdir #{launch_agents_dir}"
		end
		
		# Install and start launch agent
		system "sed -e 's/@USER.HOME@/#{user_dir.gsub(/\//, '\/')}/g' #{File.join(gem_dir, launch_agent_plist)} > #{launch_agents_dir + launch_agent_plist}"
		system "launchctl load #{launch_agents_dir + launch_agent_plist}"
		system "launchctl start #{launch_agent}"
		exit
  }
opts.on("-u", "--uninstall", "Remove base configuration file") {
		puts("Are you sure you want to uninstall? This will delete your config file. (y/n)") 
		input=STDIN.gets
						
		if (input.chomp.downcase != 'y' ) 
			puts "Uninstall aborted"
			exit
		end

		# Remove Launch Agent
		system "launchctl unload #{launch_agents_dir + launch_agent_plist}" 
		system "rm #{launch_agents_dir + launch_agent_plist}"			
		system 'rm -rdf ' + File.join(user_dir, '.nc-atom')
		exit
	}

opts.on("-f","--clear-caches","Reset checked mail cache") {
	system 'rm -rdf ' + File.join(user_dir, '.nc-atom/caches/*')
		exit
}

end.parse!

p options


